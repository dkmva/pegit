from unittest import TestCase

from design.nucleases.Cas9 import SpCas9


class SpCas9TestCase(TestCase):

    def test_make_scaffold_oligos(self):
        # No scaffold_name
        oligos = SpCas9.make_scaffold_oligos()
        self.assertEqual(oligos, {'top': 'AGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCG', 'bottom': 'GCACCGACTCGGTGCCACTTTTTCAAGTTGATAACGGACTAGCCTTATTTTAACTTGCTATTTCTAG'})
        # ChimericBB
        oligos = SpCas9.make_scaffold_oligos('ChimericBB')
        self.assertEqual(oligos, {'top': 'AGAGCTAGAAATAGCAAGTTAAAATAAGGCTAGTCCGTTATCAACTTGAAAAAGTGGCACCGAGTCG', 'bottom': 'GCACCGACTCGGTGCCACTTTTTCAAGTTGATAACGGACTAGCCTTATTTTAACTTGCTATTTCTAG'})

    def test_make_spacer_oligos(self):
        # Starts with G
        oligos = SpCas9.make_spacer_oligos('GGCCCAGACTGAGCACGTGA')
        self.assertEqual(oligos, {'top': 'caccGGCCCAGACTGAGCACGTGAgtttt', 'bottom': 'ctctaaaacTCACGTGCTCAGTCTGGGCC'})
        # Doesn't start with G
        oligos = SpCas9.make_spacer_oligos('CGCCCAGACTGAGCACGTGA')
        self.assertEqual(oligos, {'top': 'caccgCGCCCAGACTGAGCACGTGAgtttt', 'bottom': 'ctctaaaacTCACGTGCTCAGTCTGGGCGc'})

    def test_make_extension_oligos(self):
        oligos = SpCas9.make_extension_oligos('TCTGCCATCAAAGCGTGCTCAGTCTG')
        self.assertEqual(oligos, {'top': 'gtgcTCTGCCATCAAAGCGTGCTCAGTCTG', 'bottom': 'aaaaCAGACTGAGCACGCTTTGATGGCAGA'})

    def test_make_nicking_oligos(self):
        # Starts with G
        oligos = SpCas9.make_nicking_oligos('GGCCCAGACTGAGCACGTGA')
        self.assertEqual(oligos, {'top': 'caccGGCCCAGACTGAGCACGTGA', 'bottom': 'aaacTCACGTGCTCAGTCTGGGCC'})
        # Doesn't start with G
        oligos = SpCas9.make_nicking_oligos('CGCCCAGACTGAGCACGTGA')
        self.assertEqual(oligos, {'top': 'caccgCGCCCAGACTGAGCACGTGA', 'bottom': 'aaacTCACGTGCTCAGTCTGGGCGc'})

    def test_find_spacers(self):
        wt = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        mut = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGcttTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        spacers = SpCas9.find_spacers(wt, mut, 200, 203, 100)
        self.assertEqual(spacers[0]['spacer'], 'GGCCCAGACTGAGCACGTGA')
        self.assertEqual(spacers[0]['position'], 183)
        self.assertEqual(spacers[0]['cut_site'], 200)
        self.assertEqual(spacers[0]['strand'], 1)
        self.assertEqual(spacers[0]['pam'], ('TGG', 203))
        self.assertEqual(spacers[0]['pam_disrupted'], True)
        self.assertEqual(spacers[0]['distance'], 0)

    def test_find_nicking_spacers(self):
        wt = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        mut = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGcttTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        spacers = SpCas9.find_nicking_spacers(wt, mut, 1, 200, 'ChimericBB', 100)

        self.assertEqual(spacers[0]['spacer'], 'CCATCAAAGCGTGCTCAGTC')
        self.assertEqual(spacers[0]['position'], -8)
        self.assertEqual(spacers[0]['kind'], '3b')

        self.assertEqual(spacers[2]['kind'], '3')
        self.assertEqual(spacers[2]['spacer'], 'GCACATACTAGCCCCTGTCT')
        self.assertEqual(spacers[2]['position'], 66)


    def test_make_rt_sequence(self):
        reference = 'cttTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        self.assertEqual(SpCas9._make_rt_sequence(reference, 3, 0, 3, 10, 34)[0], 'cttTGATGGCAGA')
        # Should be same as above, extension should not start with a C
        self.assertEqual(SpCas9._make_rt_sequence(reference, 3, 0, 3, 9, 34)[0], 'cttTGATGGCAGA')
        reference = 'aTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        self.assertEqual(SpCas9._make_rt_sequence(reference, 1, 0, 1, 10, 34)[0], 'aTGATGGCAGA')
        self.assertEqual(SpCas9._make_rt_sequence(reference, 1, 0, 1, 9, 34)[0], 'aTGATGGCAGA')
        reference = 'GATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        self.assertEqual(SpCas9._make_rt_sequence(reference, 1, -1, 1, 9, 34)[0], 'GATGGCAGA')
        self.assertEqual(SpCas9._make_rt_sequence(reference, 1, -1, 1, 10, 34)[0], 'GATGGCAGAGGA')

    def test_make_pbs_sequence(self):
        reference = 'TATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACG'
        self.assertEqual(SpCas9._make_pbs_sequence(reference, 13, 20)[0], 'CAGACTGAGCACG')
        self.assertEqual(SpCas9._make_pbs_sequence(reference, 10, 10)[0], 'ACTGAGCACG')
        self.assertEqual(SpCas9._make_pbs_sequence(reference, 11, 11)[0], 'GACTGAGCACG')
        self.assertEqual(SpCas9._make_pbs_sequence(reference, 10, 20)[0], 'ACTGAGCACG')
        reference = 'TATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAAAAAA'
        self.assertEqual(SpCas9._make_pbs_sequence(reference, 13, 20)[0], 'CCCAGACTGAAAAAA')

    def test_make_extension_sequence(self):
        pbs_min_length=13
        pbs_max_length=20
        rt_min_length=10
        rt_max_length=34

        # CTT_insertion
        wt = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        mut = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGcttTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        pbs_length, rt_length, extension_seq, alternates = SpCas9.make_extension_sequence(wt, mut, 1, 200, 3, 3, pbs_min_length, pbs_max_length, rt_min_length, rt_max_length)
        self.assertEqual(extension_seq, 'TCTGCCATCAaagCGTGCTCAGTCTG')

        # T to A
        mut = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGaGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        pbs_length, rt_length, extension_seq, alternates = SpCas9.make_extension_sequence(wt, mut, 1, 200, 1, 1, pbs_min_length, pbs_max_length, rt_min_length, rt_max_length)
        self.assertEqual(extension_seq, 'TCCTCTGCCATCtCGTGCTCAGTCTG')

        # T deletion
        mut = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        pbs_length, rt_length, extension_seq, alternates = SpCas9.make_extension_sequence(wt, mut, 1, 200, 1, 1, pbs_min_length, pbs_max_length, rt_min_length, rt_max_length)
        self.assertEqual(extension_seq, 'TCCTCTGCCATCCGTGCTCAGTCTG')

        # A insertion
        mut = 'TGGAGAGTTTTAAGCAAGGGCTGATGTGGGCTGCCTAGAAAGGCATGGATGAGAGAAGCCTGGAGACAGGGATCCCAGGGAAACGCCCATGCAATTAGTCTATTTCTGCTGCAAGTAAGCATGCATTTGTAGGCTTGATGCTTTTTTTCTGCTTCTCCAGCCCTGGCCTGGGTCAATCCTTGGGGCCCAGACTGAGCACGaTGATGGCAGAGGAAAGGAAGCCCTGCTTCCTCCAGAGGGCGTCGCAGGACAGCTTTTCCTAGACAGGGGCTAGTATGTGCAGCTCCTGCACCGGGATACTGGTTGACAAGTTTGGCTGGGCTGGAAGCCAGCACCTAGGGAGGTCCCTGGAAGGGGCCAGCCTCACCAGGAGAGGAGGGACCTGGCCCTTCAGGGTCGAG'
        pbs_length, rt_length, extension_seq, alternates = SpCas9.make_extension_sequence(wt, mut, 1, 200, 1, 1, pbs_min_length, pbs_max_length, rt_min_length, rt_max_length)
        self.assertEqual(extension_seq, 'TCTGCCATCAtCGTGCTCAGTCTG')